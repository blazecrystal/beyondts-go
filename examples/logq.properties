## global settings for logq, attention: these two configurations can't be re-configed after this file loaded
# whether to run logq in debug mode, in debug mode, we will output some running messages
LogQ.config.debug=true
# period to refresh configurations of logq, unit:ms
# if this is set to -1, configuration will never refresh
LogQ.config.refresh=1000000

## logger settings
# this is an example of logger named "test", whose level is debug, and will use appenders named "stdout" & "localFile"
LogQ.logger.test=debug, syslog
LogQ.logger.test2/abc=debug, stdout

## appender settings
## appender type should only be stdout/local_file/remote_file/syslog/database
# this is an example of appender whose type is stdout, this appender only support two attributes.
# stdout appender just output logs to standard output
LogQ.appender.stdout.type=stdout
# layout shows the output format. %t% is timestamp current log written, %p% is log level(debug/info/warn/error/fatal),
# %sf% is short-file name(only file name) this log action occured, %lf% is long-file name(absolute path of file),
# %n% is the line in this file current log action occured, %c% is the main msg of the log,
# %ln% is logger name
LogQ.appender.stdout.layout=%t% %p% [%ln%] %sf%(%n%) %c%

# this is an example of appender whose type is local_file, this appender support seven attributes
LogQ.appender.localFile.type=local_file
LogQ.appender.localFile.layout=%t% %p% [%ln%] %sf%(%n%) %c%
# file defined the target file path & name, you can use ${xxx} for parameters in environment
LogQ.appender.localFile.file=${user.dir}/logs/threshold/test.log
# dailyRolling defined whether to write logs to a new file when a new day comes(00:00)
LogQ.appender.localFile.dailyRolling=true
# threshold defined the max size of a log file, format: g|m|k|b
# threshold is not necessary while dailyRolling is true
LogQ.appender.localFile.threshold=0|10|0|0
# zip defined whether to zip old log file when a new file created.
# file name of zipped file will be like "test.log.yyyymmdd.zip" for dailyRolling
# or "test.log.1.zip" for threshold
LogQ.appender.localFile.zip=true
# keep defined max old file count. eg. if defined to 10, then we will only keep 10 old log files(zipped or unzipped)
# for dailyRolling, the oldest one will be deleted, for threshold, the oldest one will be deleted and all left will be
# renamed from 1 to n, 1 means the oldest among all files left
LogQ.appender.localFile.keep=10

# this is an example of appender whose type is syslog, this appender only support four attributes.
# syslog appender will create a udp connection to some server, and send a log in an udp packet
LogQ.appender.syslog.type=syslog
LogQ.appender.syslog.layout=%t% %p% [%ln%] %sf%(%n%) %c%
# ip for syslog reciever
LogQ.appender.syslog.serverIp=127.0.0.1
# port for syslog reciever
LogQ.appender.syslog.serverPort=5140

# this is an example of appender whose type is database, this appender only support two attributes.
# database appender will execute a given sql while logging
LogQ.appender.database.type=database
# table to insert logs
LogQ.appender.database.table=logs
# columns in the table should be insert values. if you need a random string id, you should define the column name here apparently
# otherwise, you needn't define it and should define the column in database use an auto-valued type, such as auto-increase or sequence.NextVal
LogQ.appender.database.columns=id logtime level logger src lineno content
# if you need a random string id for each row, you should define max length of this column
LogQ.appender.database.maxIdLen=32
# values to insert into the table, these values should map to columns defined with "LogQ.appender.database.columns"
# %rid% means a random string id
LogQ.appender.database.params=%rid% %t% %p% %ln% %sf% %n% %c%
# driver for this database
LogQ.appender.database.driver=mysql
# url for this database
LogQ.appender.database.url=root:beyondts@tcp(127.0.0.1:3306)/test